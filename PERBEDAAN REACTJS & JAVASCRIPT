IMPORT & EXPORT
  Pada javascript biasa ketika kita ingin menggunakan variabel pada file berbeda harus mendefinisikannya secara embeded terstruktur pada file html:
  <script src="script/utils.js"><script/>
  <script src="script/app.js"><script/>

  Atau import dan export dari file ke file
  misal utils.js (berada di folder script):
    //mendefinisikan variabel baru lalu export
    export let variabel = "test"
  lalu pada App.js (berada di folder script):
    //mengakses variabel di utils
    import {variabel} from "./utils"

  Atau membuat export secara grouping/listing:
    utisl.js:
    //mendefinisikan variabel baru lalu export
    export let variabel = "test"
    export let variabel2 = "test2"
    app.js:
    //mengakses variabel di utils
    import {variabel, variabel2} from "./utils"

  Atau membuat export secara object notasi:
    utisl.js:
    //mendefinisikan variabel baru lalu export
    export let variabel = "test"
    export let variabel2 = "test2"
    app.js:
    //mengakses variabel di utils
    import * as utils from "./utils"
    console.log(utils.variabel2)

  Atau menetapkan nilai variabel sacara default
    utils.js
    //untuk nama variabel memang tidak didefinisikan
    export default = "test"
    app.js
    //mengakses dan memberikan nama variabel default saat melakukan import
    import variabel from "./utils"
    
  Maka reactjs mengimplementasikan konsep import-export tersebut secara sederhana tanpa mengcompile/mengunduh file tersebut secara berurutan (satu persatu) dilaman browser, tetapi dicompile menggunakan dependenci react sebelum dirender ke laman browser

VARIABLES & VALUES
  Revisiting merupakan aturan sintaksis untuk penamaan variabel yg umumnya identik dengan camelCase, tanpa spasi (whitespace), dan memiliki penamaan fungsi yang jelas dan bisa membedakan jenis variabel let dan const

FUNCTIONS & PARAMATERS
  Pada js terdiri dari beberapa jenis penulisan function yaitu:
  Basic:
    function greet() {
      let variabel = "test"
      return console.log(variabel)
    }
    //memanggil
    greet()
  Arrow:
    const greet => () {}

  Sedangkan parameter merupakan values yang berada dalam function
    function greet(sayIt) {
      return console.log(sayIt)
    }

  Pada reactjs pada umumnya menerpakan arrow function karna lebih ringkas dalam sintaksi

OBJECTS & CLASSES
  Secara umum object merupakan kumpulan dari beberapa data (bisa variabel atau sebuah function) yang terkoleksi dalam satu objek yang terdiri dari unsur properti dan value
  //mendefinisikan sebuah objek
  const user = {
    name: 'test',
    age: 34,
    greet() {
      console.log("halo")
    }
  }

  //memangil properti dari objek/objek notasi
  console.log(user.greet())

  Class adalah sebuah blueprint untuk membuat lebih banyak objek, variabel dan fungsi. Dimana nama class merupakan ProperCase
  class User {
    constructor(name, age) {
      this.name = name
      this.age = age
    }

    const greet => () {
      console.log("hallo")
    }
  }

  //mengakses class
  const user1 = new User("Man", 35)
  console.log(user1)
  user1.greet();

ARRAYS & MAP
  Array merupakan sebuah sekumpulan nilai yang memiliki urutan absolut berbeda dengan objek yang tidak memiliki indexing pada nilai-nilainya
  const data = [1, 2, 4, 6, 5]
  
  //akses nilai dalam array
  data[0]

  //menambahkan nilai baru kedalam array
  data.push(9)

  //atau mencari index tertentu seccara identik
  data.findIndex((item)=>{
    return item === 1
  })

  //fungsi diatas bisa dienkapsulasi kembali kedalam sebuah variabel. dalamm artian pada sintaksis js menggunakan arrow function sangan ringkas
  const index = data.findIndex((item)=>{
    return item === 1
  }) 

  Map adalah pemetaan untuk mengubah data dari kumpulan nilai. hampir sama seperti fungsi findIndex akan tetapi pada penerapan reactjs implementasi pemetaan data banyak menggunakan map
  //contoh penerapan
  data.map((item) => {
    item + 1
  })

  //harusnya hasilnya seperti ini array(2,3,5,7,6)

  Atau jika ingin membungkus setiap nilai dari array menjadi sebuh objek:
  data.map((item) => {
    ({data: item + 1})
  })

DESTRUCTURING (IN MODERN JS)
  Destruturing array:
  //definisi array sederhana
  const data = [1, 2, 4, 6, 5]
  //destructuring array (pemanggilan secara singkat di dalam variabel itu sendiri)
  const [data1, data2, data3, data4, data5] = [1, 2, 4, 6, 5]

  Destructuring object:
  //mendefinisikan sebuah objek
  const user = {
    name: 'test',
    age: 34,
    greet() {
      console.log("halo")
    }
  }
  //destructuring objek
  const {nama, umur, fungsiSalam} = {
    name: 'test',
    age: 34,
    greet() {
      console.log("halo")
    }
  }

  Destructuring paramaters list
  //standar penerimaan parameter dari sebuah argumen bertipe objek atau array
  function storeOrder(order) {
    localStorage.setItem('id', order.id);
    localStorage.setItem('currency', order.currency);
  }
  //ketika dilakukan destructuring. Kenapa dilakukan destructuring pada dasarnya objek dan array linear berurutan sesuai struktur definisinya
  function storeOrder({id, currency}) {
    localStorage.setItem('id', id);
    localStorage.setItem('currency', currency);
  }

  Konsep destructuring banyak diadopsi di dalam reactjs

SPREAD OPERATOR
  Spread operator meruapakan penggabungan sebuah data baik tipe objek dan array. penggabungan disini tidak dilakuka secara bersarang (nested) akan tetapi lebih menjadi satu koleksi data (objek atau araay)
  Spread array:
  const data = [1, 2, 4, 6, 5]
  const data1 = [1, 2, 4, 6, 5]
  //pull out array with spread operator
  const newData = [...data, ...data1]

  Spread object:
  const user = {
    name: 'test',
    age: 34,
  }
  const extendUser = {
    name1: 'test',
    age2: 34,
  }
  const newUser = {...user, ...extendUser}

CONTROL STRUCTURE
  //kebanyakan untuk melakukan kontrol terhadap item struktur data pada js menggunakan if
  const word = prompt('type the word...')
  if (word === 'good') {
    console.log('it's correct')
  } else if (word === 'bad') {
    console.log('it's correct')
  } else {
    console.log("it's wrong")
  }

  //atau menggunakan perintah for untuk mengontrol aliran struktur data
  const words = ['good', 'bad']
  for (const word of wordsd) {
    console.log(word)
  }

DOM Manipulating  
  //Pada react manipulating menggunakan sintaksi deklaratif dari framework react

  //Paramater juga bisa dijadikan sekaligus function dengan:
  function greeter(greetFn) {
    greetFn()
  }

  //dengan menambahkan argumen sebagai function kosong menggunakan sintaksis arrow function
  greeter(() => console.log('hi'))

  //di dalam function juga bisa memiliki fungsi lain yang didefinisikan
  function init() {
    const greeter => () {
        console.log('hi')
    }

  greeter()
  }

  init()

PRIMITIVE & REFERENCE VALUES
  //variabel primitif ketika dikelola sejatinya tidak mengubah nilai awal akan tetapi membuat nilai baru
  let greeter = 'hi'
  greter = 'hallo'

  //variabel referensi merupakan variabel yang nilainya bisa dirubah berdasarkan item data refernsinya. hal ini umumnya bekerja terhadap data array atau object
  const words = ['good', 'bad']
  words.push('wrong')

  //tipe variabel conts sejatinya masih bisa dilakukan perubahan nilainya menggunakan variabel referensi. hanya saja tipe variabel const tidak bisa dilakukan overide terdap nama variabelnya

